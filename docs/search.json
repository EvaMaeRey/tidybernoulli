[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidybernoulli authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). tidybernoulli: Observe consecutive bernoulli trials dataframe. R package version 0.0.0.9000.","code":"@Manual{,   title = {tidybernoulli: Observe consecutive bernoulli trials in dataframe},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"tidybernoulli","dir":"","previous_headings":"","what":"Observe consecutive bernoulli trials in dataframe ","title":"Observe consecutive bernoulli trials in dataframe ","text":"goal tidybernoulli creates framework work independent, repeated trials intuitive, fluid, computation-friendly way. Bernoulli trial independent trial two outcomes (usually success failure), probabilities associated new trial independent previous trials. Instead looking realization single trials trials histories, look probability distributions generated adding Bernoulli trials. Data frames generated contain row outcome history two columns trial index – one column trial outcome one column associated probability. outcome-probability pathways built , summary functions allow us ask questions global outcomes; e.g. likely observe least one success 5 fair coin flips. Students able see distributions like binomial distribution emerge first principles. tidybernoulli inspired complementary ma206distributions treats common discrete probability distributions consistent data requirements use ggplot2 rest tidyverse.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Observe consecutive bernoulli trials in dataframe ","text":"can install development version tidybernoulli GitHub : load package.","code":"# install.packages(\"devtools\") devtools::install_github(\"EvaMaeRey/tidybernoulli\") library(tidybernoulli)"},{"path":"/index.html","id":"single-trials","dir":"","previous_headings":"","what":"Single trials","title":"Observe consecutive bernoulli trials in dataframe ","text":"provide single Bernoulli trial functions well non-bernoulli events probabilities","code":"bernoulli_trial() #>   outcome prob #> 1       0 0.75 #> 2       1 0.25 weighted_coin() #>   outcome prob #> 1   tails 0.25 #> 2   heads 0.75 fair_coin() #>   outcome prob #> 1   tails  0.5 #> 2   heads  0.5 prize_wheel() #>   outcome           prob #> 1      $0 9 of 12 slices #> 2      $1 2 of 12 slices #> 3      $3  1 of 12 slice"},{"path":"/index.html","id":"multiple-trials","dir":"","previous_headings":"","what":"Multiple trials","title":"Observe consecutive bernoulli trials in dataframe ","text":"basic example shows solve common problem:","code":"## basic example code bernoulli_trial() #>   outcome prob #> 1       0 0.75 #> 2       1 0.25  trial_init() |>   add_trials() #> # A tibble: 4 × 5 #>   history t1_outcome t1_prob t2_outcome t2_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75 #> 2       2          0    0.75          1    0.25 #> 3       3          1    0.25          0    0.75 #> 4       4          1    0.25          1    0.25  trial_init() |>   add_trials() |>   add_trials()  #> # A tibble: 8 × 7 #>   history t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75          0    0.75 #> 2       2          0    0.75          0    0.75          1    0.25 #> 3       3          0    0.75          1    0.25          0    0.75 #> 4       4          0    0.75          1    0.25          1    0.25 #> 5       5          1    0.25          0    0.75          0    0.75 #> 6       6          1    0.25          0    0.75          1    0.25 #> 7       7          1    0.25          1    0.25          0    0.75 #> 8       8          1    0.25          1    0.25          1    0.25"},{"path":"/index.html","id":"summarizing-possible-outcome-histories","dir":"","previous_headings":"","what":"Summarizing possible outcome histories","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"library(magrittr) trial_init(prob = .3) %>%   add_trials() %>%   add_trials() %>%   .$out %>%   sum_across() %>%   prod_across() #> # A tibble: 8 × 9 #>   global_probs global_…¹ history t1_ou…² t1_prob t2_ou…³ t2_prob t3_ou…⁴ t3_prob #>          <dbl>     <dbl>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1        0.343         0       1       0     0.7       0     0.7       0     0.7 #> 2        0.147         1       2       0     0.7       0     0.7       1     0.3 #> 3        0.147         1       3       0     0.7       1     0.3       0     0.7 #> 4        0.063         2       4       0     0.7       1     0.3       1     0.3 #> 5        0.147         1       5       1     0.3       0     0.7       0     0.7 #> 6        0.063         2       6       1     0.3       0     0.7       1     0.3 #> 7        0.063         2       7       1     0.3       1     0.3       0     0.7 #> 8        0.027         3       8       1     0.3       1     0.3       1     0.3 #> # … with abbreviated variable names ¹​global_outcome, ²​t1_outcome, ³​t2_outcome, #> #   ⁴​t3_outcome library(magrittr) bernoulli_trial(prob = .5) %>%   trial_init() %>%    add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() #> # A tibble: 256 × 19 #>    global_probs global…¹ history t1_ou…² t1_prob t2_ou…³ t2_prob t3_ou…⁴ t3_prob #>           <dbl>    <dbl>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1      0.00391        0       1       0     0.5       0     0.5       0     0.5 #>  2      0.00391        1       2       0     0.5       0     0.5       0     0.5 #>  3      0.00391        1       3       0     0.5       0     0.5       0     0.5 #>  4      0.00391        2       4       0     0.5       0     0.5       0     0.5 #>  5      0.00391        1       5       0     0.5       0     0.5       0     0.5 #>  6      0.00391        2       6       0     0.5       0     0.5       0     0.5 #>  7      0.00391        2       7       0     0.5       0     0.5       0     0.5 #>  8      0.00391        3       8       0     0.5       0     0.5       0     0.5 #>  9      0.00391        1       9       0     0.5       0     0.5       0     0.5 #> 10      0.00391        2      10       0     0.5       0     0.5       0     0.5 #> # … with 246 more rows, 10 more variables: t4_outcome <dbl>, t4_prob <dbl>, #> #   t5_outcome <dbl>, t5_prob <dbl>, t6_outcome <dbl>, t6_prob <dbl>, #> #   t7_outcome <dbl>, t7_prob <dbl>, t8_outcome <dbl>, t8_prob <dbl>, and #> #   abbreviated variable names ¹​global_outcome, ²​t1_outcome, ³​t2_outcome, #> #   ⁴​t3_outcome"},{"path":"/index.html","id":"further-summary-based-on-outcome-of-interest","dir":"","previous_headings":"","what":"Further summary based on outcome of interest…","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union bernoulli_trial(prob = .5) %>%   add_trials() %>%    add_trials() %>%   add_trials() %>%   add_trials(3) %>%   .$out %>%   sum_across() %>%   prod_across() %>%   group_by(global_outcome) %>%   summarize(probs = sum(global_probs)) #> # A tibble: 8 × 2 #>   global_outcome   probs #>            <dbl>   <dbl> #> 1              0 0.00781 #> 2              1 0.0547  #> 3              2 0.164   #> 4              3 0.273   #> 5              4 0.273   #> 6              5 0.164   #> 7              6 0.0547  #> 8              7 0.00781"},{"path":"/index.html","id":"cross-validate-work","dir":"","previous_headings":"","what":"Cross-validate work","title":"Observe consecutive bernoulli trials in dataframe ","text":"…","code":"dbinom(x =  0:7, size = 7, prob = .5) #> [1] 0.0078125 0.0546875 0.1640625 0.2734375 0.2734375 0.1640625 0.0546875 #> [8] 0.0078125 bernoulli_trial(prob = .5) |>   add_trials() |>   add_trials() |>   to_tsibble()  |>   group_by(history)  |>   summarize(hist_prob = prod(prob),             count_successes = sum(outcome),             paths = paste(outcome, collapse = \",\")) |>   arrange(count_successes) |>   group_by(count_successes) |>   summarize(count_prob = sum(hist_prob)) #> # A tibble: 4 × 2 #>   count_successes count_prob #>             <dbl>      <dbl> #> 1               0      0.125 #> 2               1      0.375 #> 3               2      0.375 #> 4               3      0.125"},{"path":"/index.html","id":"drob-quick-job-on-veridical-paradox","dir":"","previous_headings":"","what":"drob quick job on veridical paradox","title":"Observe consecutive bernoulli trials in dataframe ","text":"#tidyverse simulation demonstrate wait two heads row, takes 6 flips average, wait heads tails, takes 4 flips average ’s second chances…","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ forcats   1.0.0     ✔ readr     2.1.4 #> ✔ ggplot2   3.4.1     ✔ stringr   1.5.0 #> ✔ lubridate 1.9.2     ✔ tibble    3.2.0 #> ✔ purrr     1.0.1     ✔ tidyr     1.3.0 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ tidyr::extract()   masks magrittr::extract() #> ✖ dplyr::filter()    masks stats::filter() #> ✖ dplyr::lag()       masks stats::lag() #> ✖ purrr::set_names() masks magrittr::set_names() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors  # drob crossing(trial = 1:1000,          flip = 1:100) %>%    mutate(heads = rbinom(n(), 1, .5)) %>%    group_by(trial) %>%    mutate(next_flip = lead(heads),          hh = heads & next_flip,          ht = heads & !next_flip) %>%    summarise(first_hh = which(hh)[1] + 1,              first_ht = which(ht)[1] + 1) %>%    summarise(first_hh = mean(first_hh),             first_ht = mean(first_ht)) #> # A tibble: 1 × 2 #>   first_hh first_ht #>      <dbl>    <dbl> #> 1     5.90     3.93 options(pillar.print_max = Inf) fair_coin(outcome_set = c(\"T\", \"H\")) %>%    select(-prob) %>%    trial_init() %>%    add_trials() %>%    add_trials() %>%    add_trials() %>%   add_trials() %>%   add_trials() %>%   to_tsibble() %>%    group_by(history) %>%    ggplot() +    aes(y = history, x = trial) +    geom_tile(color = \"white\") +    aes(fill = outcome) -> baseplot; baseplot baseplot +    geom_point(data = . %>% filter( outcome == \"H\" & lag(outcome) == \"H\"), color = \"darkred\") baseplot +    geom_point(data = . %>% filter( outcome == \"T\" & lag(outcome) == \"H\"), color = \"darkred\")"},{"path":"/index.html","id":"16-dolphin-trials","dir":"","previous_headings":"","what":"16 dolphin trials","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"bernoulli_trial(prob = .5) |>   add_trials() |>   add_trials() |>   to_tsibble()  |>   group_by(history)  |>   summarize(hist_prob = prod(prob),             count_successes = sum(outcome),             paths = paste(outcome, collapse = \",\")) |>   arrange(count_successes) |>   group_by(count_successes) |>   summarize(prob = sum(hist_prob)) #> # A tibble: 4 × 2 #>   count_successes  prob #>             <dbl> <dbl> #> 1               0 0.125 #> 2               1 0.375 #> 3               2 0.375 #> 4               3 0.125  options(scipen = 10) bernoulli_trial(prob = .5) |>   add_trials(15) |>   to_tsibble()  |>   group_by(history)  |>   summarize(hist_prob = prod(prob),             count_successes = sum(outcome),             paths = paste(outcome, collapse = \",\")) |>   arrange(count_successes) |>   group_by(count_successes) |>   summarize(prob = sum(hist_prob)) #> # A tibble: 17 × 2 #>    count_successes      prob #>              <dbl>     <dbl> #>  1               0 0.0000153 #>  2               1 0.000244  #>  3               2 0.00183   #>  4               3 0.00854   #>  5               4 0.0278    #>  6               5 0.0667    #>  7               6 0.122     #>  8               7 0.175     #>  9               8 0.196     #> 10               9 0.175     #> 11              10 0.122     #> 12              11 0.0667    #> 13              12 0.0278    #> 14              13 0.00854   #> 15              14 0.00183   #> 16              15 0.000244  #> 17              16 0.0000153   collapse <- function(x, collapse = \", \"){   paste(x, collapse = collapse) }  bernoulli_trial(prob = .5, outcome_set = c(\"nope\", \"fish\")) |>   add_trials(15) |>   to_tsibble() %>%    group_by(history) %>%    summarise(history = collapse(outcome),             sum_successes = sum(outcome == \"fish\"),             prob = prod(prob)) %>%    group_by(sum_successes) %>%    summarise(prob = sum(prob)) #> # A tibble: 17 × 2 #>    sum_successes      prob #>            <int>     <dbl> #>  1             0 0.0000153 #>  2             1 0.000244  #>  3             2 0.00183   #>  4             3 0.00854   #>  5             4 0.0278    #>  6             5 0.0667    #>  7             6 0.122     #>  8             7 0.175     #>  9             8 0.196     #> 10             9 0.175     #> 11            10 0.122     #> 12            11 0.0667    #> 13            12 0.0278    #> 14            13 0.00854   #> 15            14 0.00183   #> 16            15 0.000244  #> 17            16 0.0000153"},{"path":"/index.html","id":"generalizing-and-simplifying-to-binomial-equation","dir":"","previous_headings":"","what":"Generalizing and simplifying to binomial equation…","title":"Observe consecutive bernoulli trials in dataframe ","text":"{{_N}C{_k}} \\cdot pkq{N-k} C = n!\\(r!*(n-r)!)","code":"ma206equations::typeset_eq_binomial() #> ${{_N}C{_k}} \\cdot p^kq^{N-k}$ ma206equations::typeset_eq_choose() #> $n!\\(r!*(n-r)!)$"},{"path":"/index.html","id":"quick-viz","dir":"","previous_headings":"","what":"Quick viz…","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"ma206distributions::tidy_dbinom(num_trials = 16, single_trial_prob = .5) %>%    ggplot() +    aes(x = num_successes,       y = probability) +    ma206distributions::geom_lollipop(annotate = TRUE) +    labs(title = \"prob distributions of successes if random\") +    ma206equations::stamp_eq_binomial(x = 3, y = .1, size = 8)"},{"path":"/index.html","id":"peek-into-internals-of-tidybernoulli","dir":"","previous_headings":"","what":"Peek into internals of tidybernoulli","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"readLines(\"R/bernoulli-trial.R\")[150:200] #>  [1] \"                    # objects\"                                                            #>  [2] \"                    trial = NULL,\"                                                        #>  [3] \"                    index = NULL,\"                                                        #>  [4] \"                    out = NULL,\"                                                          #>  [5] \"                    out_ts = NULL,\"                                                       #>  [6] \"                    as_ts = FALSE,\"                                                       #>  [7] \"\"                                                                                         #>  [8] \"\"                                                                                         #>  [9] \"                    # functions\"                                                          #> [10] \"                    init = function(trial = NULL){\"                                       #> [11] \"\"                                                                                         #> [12] \"                      self$trial <- trial\"                                                #> [13] \"                      self$index <- 1\"                                                    #> [14] \"\"                                                                                         #> [15] \"                      self$out <- cross_trials(self$trial,\"                               #> [16] \"                                               num_trials = self$index) |>\"               #> [17] \"                        dplyr::mutate(history = dplyr::row_number()) |>\"                  #> [18] \"                        dplyr::select(.data$history, dplyr::everything())\"                #> [19] \"\"                                                                                         #> [20] \"                      invisible(self)          #returns\"                                  #> [21] \"\"                                                                                         #> [22] \"\"                                                                                         #> [23] \"                    },\"                                                                   #> [24] \"\"                                                                                         #> [25] \"                    update = function(increment = 1){ # a method\"                         #> [26] \"\"                                                                                         #> [27] \"                      self$index <- self$index + increment\"                               #> [28] \"\"                                                                                         #> [29] \"                      # displaying\"                                                       #> [30] \"                      self$out <- cross_trials(self$trial, num_trials = self$index)  |>\"  #> [31] \"                        dplyr::mutate(history = dplyr::row_number()) |>\"                  #> [32] \"                        dplyr::select(.data$history, dplyr::everything())\"                #> [33] \"\"                                                                                         #> [34] \"                      invisible(self)          #returns\"                                  #> [35] \"\"                                                                                         #> [36] \"                    },\"                                                                   #> [37] \"\"                                                                                         #> [38] \"                    to_time_series = function(as_ts = FALSE){\"                            #> [39] \"\"                                                                                         #> [40] \"                      self$as_ts <- as_ts\"                                                #> [41] \"\"                                                                                         #> [42] \"                    },\"                                                                   #> [43] \"\"                                                                                         #> [44] \"                    print = function() {  # print method; default is to print everything\" #> [45] \"\"                                                                                         #> [46] \"                      if(self$as_ts){\"                                                    #> [47] \"\"                                                                                         #> [48] \"                            print(\"                                                       #> [49] \"\"                                                                                         #> [50] \"                            self$out |>\"                                                  #> [51] \"                              tidyr::pivot_longer (\""},{"path":"/reference/add_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — add_trials","title":"Title — add_trials","text":"Title","code":""},{"path":"/reference/add_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — add_trials","text":"","code":"add_trials(trials, increment = 1, as_ts = FALSE)"},{"path":"/reference/add_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — add_trials","text":"increment","code":""},{"path":"/reference/add_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — add_trials","text":"","code":"bernoulli_trial() |> trial_init() |>   add_trials() |>   add_trials() #> # A tibble: 8 × 7 #>   history t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75          0    0.75 #> 2       2          0    0.75          0    0.75          1    0.25 #> 3       3          0    0.75          1    0.25          0    0.75 #> 4       4          0    0.75          1    0.25          1    0.25 #> 5       5          1    0.25          0    0.75          0    0.75 #> 6       6          1    0.25          0    0.75          1    0.25 #> 7       7          1    0.25          1    0.25          0    0.75 #> 8       8          1    0.25          1    0.25          1    0.25  bernoulli_trial() |>   add_trials() #> # A tibble: 4 × 5 #>   history t1_outcome t1_prob t2_outcome t2_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75 #> 2       2          0    0.75          1    0.25 #> 3       3          1    0.25          0    0.75 #> 4       4          1    0.25          1    0.25  bernoulli_trial() |>   add_trials() |>   add_trials(as_ts = TRUE) #> # A tibble: 24 × 4 #>    history trial outcome  prob #>      <int> <chr>   <dbl> <dbl> #>  1       1 t1          0  0.75 #>  2       1 t2          0  0.75 #>  3       1 t3          0  0.75 #>  4       2 t1          0  0.75 #>  5       2 t2          0  0.75 #>  6       2 t3          1  0.25 #>  7       3 t1          0  0.75 #>  8       3 t2          1  0.25 #>  9       3 t3          0  0.75 #> 10       4 t1          0  0.75 #> # … with 14 more rows   fair_coin() |>   add_trials(2) #> # A tibble: 8 × 7 #>   history t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>     <int> <chr>        <dbl> <chr>        <dbl> <chr>        <dbl> #> 1       1 heads          0.5 heads          0.5 heads          0.5 #> 2       2 heads          0.5 heads          0.5 tails          0.5 #> 3       3 heads          0.5 tails          0.5 heads          0.5 #> 4       4 heads          0.5 tails          0.5 tails          0.5 #> 5       5 tails          0.5 heads          0.5 heads          0.5 #> 6       6 tails          0.5 heads          0.5 tails          0.5 #> 7       7 tails          0.5 tails          0.5 heads          0.5 #> 8       8 tails          0.5 tails          0.5 tails          0.5"},{"path":"/reference/bernoulli_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — bernoulli_trial","title":"Title — bernoulli_trial","text":"Title","code":""},{"path":"/reference/bernoulli_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bernoulli_trial","text":"","code":"bernoulli_trial(outcome_set = c(0, 1), prob = 0.25)"},{"path":"/reference/bernoulli_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bernoulli_trial","text":"outcome_set set two outcomes second considered 'success' prob probability 'success', default .25","code":""},{"path":"/reference/bernoulli_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — bernoulli_trial","text":"probability outcome 0 1","code":""},{"path":"/reference/bernoulli_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — bernoulli_trial","text":"","code":"bernoulli_trial(.5) #>   outcome prob #> 1     0.5 0.75 #> 2     0.5 0.25 bernoulli_trial(.6) #>   outcome prob #> 1     0.6 0.75 #> 2     0.6 0.25"},{"path":"/reference/cross_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — cross_trials","title":"Title — cross_trials","text":"Title","code":""},{"path":"/reference/cross_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — cross_trials","text":"","code":"cross_trials(trial, num_trials = 2)"},{"path":"/reference/cross_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — cross_trials","text":"num_trials","code":""},{"path":"/reference/cross_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — cross_trials","text":"","code":"bernoulli_trial() |>   cross_trials(num_trials = 3) #> # A tibble: 8 × 6 #>   t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>        <dbl>   <dbl>      <dbl>   <dbl>      <dbl>   <dbl> #> 1          0    0.75          0    0.75          0    0.75 #> 2          0    0.75          0    0.75          1    0.25 #> 3          0    0.75          1    0.25          0    0.75 #> 4          0    0.75          1    0.25          1    0.25 #> 5          1    0.25          0    0.75          0    0.75 #> 6          1    0.25          0    0.75          1    0.25 #> 7          1    0.25          1    0.25          0    0.75 #> 8          1    0.25          1    0.25          1    0.25"},{"path":"/reference/fair_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — fair_coin","title":"Title — fair_coin","text":"Title","code":""},{"path":"/reference/fair_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — fair_coin","text":"","code":"fair_coin(outcome_set = c(\"tails\", \"heads\"))"},{"path":"/reference/fair_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — fair_coin","text":"prob probability success, default .25","code":""},{"path":"/reference/fair_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — fair_coin","text":"probability outcome 0 1","code":""},{"path":"/reference/fair_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — fair_coin","text":"","code":"fair_coin() #>   outcome prob #> 1   tails  0.5 #> 2   heads  0.5 fair_coin(outcome_set = 0:1) #>   outcome prob #> 1       0  0.5 #> 2       1  0.5 fair_coin(outcome_set = c(FALSE, TRUE)) #>   outcome prob #> 1   FALSE  0.5 #> 2    TRUE  0.5 fair_coin(outcome_set = c(\"fish\", \"no fish\")) #>   outcome prob #> 1    fish  0.5 #> 2 no fish  0.5"},{"path":"/reference/prize_wheel.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — prize_wheel","title":"Title — prize_wheel","text":"Title","code":""},{"path":"/reference/prize_wheel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — prize_wheel","text":"","code":"prize_wheel(back_story = TRUE)"},{"path":"/reference/prize_wheel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — prize_wheel","text":"back_story","code":""},{"path":"/reference/prize_wheel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — prize_wheel","text":"","code":"prize_wheel() #>   outcome           prob #> 1      $0 9 of 12 slices #> 2      $1 2 of 12 slices #> 3      $3  1 of 12 slice prize_wheel(back_story = FALSE) #>   outcome       prob #> 1       0 0.75000000 #> 2       1 0.16666667 #> 3       3 0.08333333  prize_wheel() |>  trial_init() |>  trial_advance() #> # A tibble: 9 × 5 #>   history t1_outcome t1_prob        t2_outcome t2_prob        #>     <int> <chr>      <chr>          <chr>      <chr>          #> 1       1 $0         9 of 12 slices $0         9 of 12 slices #> 2       2 $0         9 of 12 slices $1         2 of 12 slices #> 3       3 $0         9 of 12 slices $3         1 of 12 slice  #> 4       4 $1         2 of 12 slices $0         9 of 12 slices #> 5       5 $1         2 of 12 slices $1         2 of 12 slices #> 6       6 $1         2 of 12 slices $3         1 of 12 slice  #> 7       7 $3         1 of 12 slice  $0         9 of 12 slices #> 8       8 $3         1 of 12 slice  $1         2 of 12 slices #> 9       9 $3         1 of 12 slice  $3         1 of 12 slice   prize_wheel(back_story = FALSE) |>  trial_init() |>  trial_advance() #> # A tibble: 9 × 5 #>   history t1_outcome t1_prob t2_outcome t2_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0  0.75            0  0.75   #> 2       2          0  0.75            1  0.167  #> 3       3          0  0.75            3  0.0833 #> 4       4          1  0.167           0  0.75   #> 5       5          1  0.167           1  0.167  #> 6       6          1  0.167           3  0.0833 #> 7       7          3  0.0833          0  0.75   #> 8       8          3  0.0833          1  0.167  #> 9       9          3  0.0833          3  0.0833"},{"path":"/reference/prod_across.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — prod_across","title":"Title — prod_across","text":"Title","code":""},{"path":"/reference/prod_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — prod_across","text":"","code":"prod_across(data, var_key = \"prob\")"},{"path":"/reference/prod_across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — prod_across","text":"var_key","code":""},{"path":"/reference/prod_across.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — prod_across","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(magrittr) bernoulli_trial(prob = .5) %>%   add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() %>%   group_by(global_outcome) %>%   summarize(probs = sum(global_probs)) #> # A tibble: 9 × 2 #>   global_outcome   probs #>            <dbl>   <dbl> #> 1              0 0.00391 #> 2              1 0.0312  #> 3              2 0.109   #> 4              3 0.219   #> 5              4 0.273   #> 6              5 0.219   #> 7              6 0.109   #> 8              7 0.0312  #> 9              8 0.00391   bernoulli_trial(prob = .5) %>%   add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() #> # A tibble: 256 × 19 #>    global_probs global…¹ history t1_ou…² t1_prob t2_ou…³ t2_prob t3_ou…⁴ t3_prob #>           <dbl>    <dbl>   <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1      0.00391        0       1       0     0.5       0     0.5       0     0.5 #>  2      0.00391        1       2       0     0.5       0     0.5       0     0.5 #>  3      0.00391        1       3       0     0.5       0     0.5       0     0.5 #>  4      0.00391        2       4       0     0.5       0     0.5       0     0.5 #>  5      0.00391        1       5       0     0.5       0     0.5       0     0.5 #>  6      0.00391        2       6       0     0.5       0     0.5       0     0.5 #>  7      0.00391        2       7       0     0.5       0     0.5       0     0.5 #>  8      0.00391        3       8       0     0.5       0     0.5       0     0.5 #>  9      0.00391        1       9       0     0.5       0     0.5       0     0.5 #> 10      0.00391        2      10       0     0.5       0     0.5       0     0.5 #> # … with 246 more rows, 10 more variables: t4_outcome <dbl>, t4_prob <dbl>, #> #   t5_outcome <dbl>, t5_prob <dbl>, t6_outcome <dbl>, t6_prob <dbl>, #> #   t7_outcome <dbl>, t7_prob <dbl>, t8_outcome <dbl>, t8_prob <dbl>, and #> #   abbreviated variable names ¹​global_outcome, ²​t1_outcome, ³​t2_outcome, #> #   ⁴​t3_outcome"},{"path":"/reference/seq_across.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — seq_across","title":"Title — seq_across","text":"Title","code":""},{"path":"/reference/seq_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — seq_across","text":"","code":"seq_across(data, var_key = \"outcome\")"},{"path":"/reference/seq_across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — seq_across","text":"var_key","code":""},{"path":"/reference/seq_across.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — seq_across","text":"","code":"library(magrittr) library(dplyr) bernoulli_trial(prob = .5) %>% add_trials(3) %>%   .$out %>%   seq_across() %>%   prod_across() %>%   group_by(global_outcome) %>%   summarize(probs = sum(global_probs)) #> # A tibble: 16 × 2 #>    global_outcome  probs #>    <chr>           <dbl> #>  1 0, 0, 0, 0     0.0625 #>  2 0, 0, 0, 1     0.0625 #>  3 0, 0, 1, 0     0.0625 #>  4 0, 0, 1, 1     0.0625 #>  5 0, 1, 0, 0     0.0625 #>  6 0, 1, 0, 1     0.0625 #>  7 0, 1, 1, 0     0.0625 #>  8 0, 1, 1, 1     0.0625 #>  9 1, 0, 0, 0     0.0625 #> 10 1, 0, 0, 1     0.0625 #> 11 1, 0, 1, 0     0.0625 #> 12 1, 0, 1, 1     0.0625 #> 13 1, 1, 0, 0     0.0625 #> 14 1, 1, 0, 1     0.0625 #> 15 1, 1, 1, 0     0.0625 #> 16 1, 1, 1, 1     0.0625  library(magrittr) library(dplyr) bernoulli_trial(prob = .25) %>% add_trials(3) %>%   .$out %>%   seq_across() %>%   prod_across() #> # A tibble: 16 × 11 #>    global_probs global…¹ history t1_ou…² t1_prob t2_ou…³ t2_prob t3_ou…⁴ t3_prob #>           <dbl> <chr>      <int>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1      0.316   0, 0, 0…       1       0    0.75       0    0.75       0    0.75 #>  2      0.105   0, 0, 0…       2       0    0.75       0    0.75       0    0.75 #>  3      0.105   0, 0, 1…       3       0    0.75       0    0.75       1    0.25 #>  4      0.0352  0, 0, 1…       4       0    0.75       0    0.75       1    0.25 #>  5      0.105   0, 1, 0…       5       0    0.75       1    0.25       0    0.75 #>  6      0.0352  0, 1, 0…       6       0    0.75       1    0.25       0    0.75 #>  7      0.0352  0, 1, 1…       7       0    0.75       1    0.25       1    0.25 #>  8      0.0117  0, 1, 1…       8       0    0.75       1    0.25       1    0.25 #>  9      0.105   1, 0, 0…       9       1    0.25       0    0.75       0    0.75 #> 10      0.0352  1, 0, 0…      10       1    0.25       0    0.75       0    0.75 #> 11      0.0352  1, 0, 1…      11       1    0.25       0    0.75       1    0.25 #> 12      0.0117  1, 0, 1…      12       1    0.25       0    0.75       1    0.25 #> 13      0.0352  1, 1, 0…      13       1    0.25       1    0.25       0    0.75 #> 14      0.0117  1, 1, 0…      14       1    0.25       1    0.25       0    0.75 #> 15      0.0117  1, 1, 1…      15       1    0.25       1    0.25       1    0.25 #> 16      0.00391 1, 1, 1…      16       1    0.25       1    0.25       1    0.25 #> # … with 2 more variables: t4_outcome <dbl>, t4_prob <dbl>, and abbreviated #> #   variable names ¹​global_outcome, ²​t1_outcome, ³​t2_outcome, ⁴​t3_outcome"},{"path":"/reference/sum_across.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — sum_across","title":"Title — sum_across","text":"Title","code":""},{"path":"/reference/sum_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — sum_across","text":"","code":"sum_across(data, var_key = \"outcome\")"},{"path":"/reference/sum_across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — sum_across","text":"var_key","code":""},{"path":"/reference/to_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — to_tsibble","title":"Title — to_tsibble","text":"Title","code":""},{"path":"/reference/to_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — to_tsibble","text":"","code":"to_tsibble(trials)"},{"path":"/reference/to_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — to_tsibble","text":"trials","code":""},{"path":"/reference/to_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — to_tsibble","text":"","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ forcats   1.0.0     ✔ readr     2.1.4 #> ✔ ggplot2   3.4.1     ✔ stringr   1.5.0 #> ✔ lubridate 1.9.2     ✔ tibble    3.2.0 #> ✔ purrr     1.0.1     ✔ tidyr     1.3.0 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ tidyr::extract()   masks magrittr::extract() #> ✖ dplyr::filter()    masks stats::filter() #> ✖ dplyr::lag()       masks stats::lag() #> ✖ purrr::set_names() masks magrittr::set_names() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors bernoulli_trial() |>   add_trials() |>   to_tsibble() #> # A tibble: 8 × 4 #>   history trial outcome  prob #>     <int> <chr>   <dbl> <dbl> #> 1       1 t1          0  0.75 #> 2       1 t2          0  0.75 #> 3       2 t1          0  0.75 #> 4       2 t2          1  0.25 #> 5       3 t1          1  0.25 #> 6       3 t2          0  0.75 #> 7       4 t1          1  0.25 #> 8       4 t2          1  0.25  bernoulli_trial(prob = .5) |>   add_trials() |>   add_trials() |>   to_tsibble()  |>   group_by(history)  |>   summarize(hist_prob = prod(prob),             count_successes = sum(outcome),             paths = paste(outcome, collapse = \",\")) |>   arrange(count_successes) |>   group_by(count_successes) |>   summarize(prob = sum(hist_prob)) #> # A tibble: 4 × 2 #>   count_successes  prob #>             <dbl> <dbl> #> 1               0 0.125 #> 2               1 0.375 #> 3               2 0.375 #> 4               3 0.125"},{"path":"/reference/trial_advance.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — trial_advance","title":"Title — trial_advance","text":"Title","code":""},{"path":"/reference/trial_advance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — trial_advance","text":"","code":"trial_advance(trials, increment = 1, as_ts = FALSE)"},{"path":"/reference/trial_advance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — trial_advance","text":"increment","code":""},{"path":"/reference/trial_advance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — trial_advance","text":"","code":"library(tidyverse) bernoulli_trial() |> trial_init() |>   trial_advance() #> # A tibble: 4 × 5 #>   history t1_outcome t1_prob t2_outcome t2_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75 #> 2       2          0    0.75          1    0.25 #> 3       3          1    0.25          0    0.75 #> 4       4          1    0.25          1    0.25  bernoulli_trial() |> trial_init() |>   trial_advance(2) #> # A tibble: 8 × 7 #>   history t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75          0    0.75 #> 2       2          0    0.75          0    0.75          1    0.25 #> 3       3          0    0.75          1    0.25          0    0.75 #> 4       4          0    0.75          1    0.25          1    0.25 #> 5       5          1    0.25          0    0.75          0    0.75 #> 6       6          1    0.25          0    0.75          1    0.25 #> 7       7          1    0.25          1    0.25          0    0.75 #> 8       8          1    0.25          1    0.25          1    0.25  bernoulli_trial() |> trial_init() |>   trial_advance(2, as_ts = TRUE) #> # A tibble: 24 × 4 #>    history trial outcome  prob #>      <int> <chr>   <dbl> <dbl> #>  1       1 t1          0  0.75 #>  2       1 t2          0  0.75 #>  3       1 t3          0  0.75 #>  4       2 t1          0  0.75 #>  5       2 t2          0  0.75 #>  6       2 t3          1  0.25 #>  7       3 t1          0  0.75 #>  8       3 t2          1  0.25 #>  9       3 t3          0  0.75 #> 10       4 t1          0  0.75 #> # … with 14 more rows  bernoulli_trial() |> trial_init() |>   trial_advance() |>   trial_advance() #> # A tibble: 8 × 7 #>   history t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>     <int>      <dbl>   <dbl>      <dbl>   <dbl>      <dbl>   <dbl> #> 1       1          0    0.75          0    0.75          0    0.75 #> 2       2          0    0.75          0    0.75          1    0.25 #> 3       3          0    0.75          1    0.25          0    0.75 #> 4       4          0    0.75          1    0.25          1    0.25 #> 5       5          1    0.25          0    0.75          0    0.75 #> 6       6          1    0.25          0    0.75          1    0.25 #> 7       7          1    0.25          1    0.25          0    0.75 #> 8       8          1    0.25          1    0.25          1    0.25"},{"path":"/reference/trial_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — trial_init","title":"Title — trial_init","text":"Title","code":""},{"path":"/reference/trial_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — trial_init","text":"","code":"trial_init(trial = NULL, prob = 0.25, as_ts = FALSE)"},{"path":"/reference/trial_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — trial_init","text":"trial","code":""},{"path":"/reference/trial_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — trial_init","text":"","code":"bernoulli_trial() |> trial_init() #>   history t1_outcome t1_prob #> 1       1          0    0.75 #> 2       2          1    0.25  bernoulli_trial() |> trial_init(as_ts = TRUE) #> # A tibble: 2 × 4 #>   history trial outcome  prob #>     <int> <chr>   <dbl> <dbl> #> 1       1 t1          0  0.75 #> 2       2 t1          1  0.25  trial_init() -> hi"},{"path":"/reference/weighted_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — weighted_coin","title":"Title — weighted_coin","text":"Title","code":""},{"path":"/reference/weighted_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — weighted_coin","text":"","code":"weighted_coin(prob = 0.75, outcome_set = c(\"tails\", \"heads\"))"},{"path":"/reference/weighted_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — weighted_coin","text":"prob probability success, default .25","code":""},{"path":"/reference/weighted_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — weighted_coin","text":"probability outcome 0 1","code":""},{"path":"/reference/weighted_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — weighted_coin","text":"","code":"weighted_coin() #>   outcome prob #> 1   tails 0.25 #> 2   heads 0.75 weighted_coin(prob = .55) #>   outcome prob #> 1   tails 0.45 #> 2   heads 0.55 weighted_coin(outcome_set = 0:1) #>   outcome prob #> 1       0 0.25 #> 2       1 0.75 weighted_coin(outcome_set = c(FALSE, TRUE)) #>   outcome prob #> 1   FALSE 0.25 #> 2    TRUE 0.75 weighted_coin(outcome_set = c(\"fish\", \"no fish\")) #>   outcome prob #> 1    fish 0.25 #> 2 no fish 0.75"}]
