[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tidybernoulli authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). tidybernoulli: Observe consecutive bernoulli trials dataframe. R package version 0.0.0.9000.","code":"@Manual{,   title = {tidybernoulli: Observe consecutive bernoulli trials in dataframe},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"tidybernoulli","dir":"","previous_headings":"","what":"Observe consecutive bernoulli trials in dataframe ","title":"Observe consecutive bernoulli trials in dataframe ","text":"goal tidybernoulli creates framework work independent, repeated trials intuitive, fluid, computation-friendly way. Bernoulli trial independent trial two outcomes (usually success failure), probabilities associated new trial independent previous trials. Instead looking realization single trials trials histories, look probability distributions generated adding Bernoulli trials. Data frames generated contain row outcome history two columns trial index – one column trial outcome one column associated probability. outcome-probability pathways built , summary functions allow us ask questions global outcomes; e.g. likely observe least one success 5 fair coin flips. Students able see distributions like binomial distribution emerge first principles.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Observe consecutive bernoulli trials in dataframe ","text":"can install development version tidybernoulli GitHub : load package.","code":"# install.packages(\"devtools\") devtools::install_github(\"EvaMaeRey/tidybernoulli\") library(tidybernoulli)"},{"path":"/index.html","id":"single-trials","dir":"","previous_headings":"","what":"Single trials","title":"Observe consecutive bernoulli trials in dataframe ","text":"provide single Bernoulli trial functions well non-bernoulli events probabilities","code":"bernoulli_trial() #>   outcome prob #> 1       0 0.75 #> 2       1 0.25 weighted_coin() #>   outcome prob #> 1   tails 0.25 #> 2   heads 0.75 fair_coin() #>   outcome prob #> 1   tails  0.5 #> 2   heads  0.5 prize_wheel() #>   outcome           prob #> 1      $0 9 of 12 slices #> 2      $1 2 of 12 slices #> 3      $3  1 of 12 slice"},{"path":"/index.html","id":"multiple-trials","dir":"","previous_headings":"","what":"Multiple trials","title":"Observe consecutive bernoulli trials in dataframe ","text":"basic example shows solve common problem:","code":"## basic example code bernoulli_trial() #>   outcome prob #> 1       0 0.75 #> 2       1 0.25  trial_init() |>   trial_advance() #> # A tibble: 4 × 4 #>   t1_outcome t1_prob t2_outcome t2_prob #>        <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75 #> 2          0    0.75          1    0.25 #> 3          1    0.25          0    0.75 #> 4          1    0.25          1    0.25   trial_init() |>   trial_advance() |>   trial_advance()  #> # A tibble: 8 × 6 #>   t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>        <int>   <dbl>      <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75          0    0.75 #> 2          0    0.75          0    0.75          1    0.25 #> 3          0    0.75          1    0.25          0    0.75 #> 4          0    0.75          1    0.25          1    0.25 #> 5          1    0.25          0    0.75          0    0.75 #> 6          1    0.25          0    0.75          1    0.25 #> 7          1    0.25          1    0.25          0    0.75 #> 8          1    0.25          1    0.25          1    0.25"},{"path":"/index.html","id":"summarizing-possible-outcome-histories","dir":"","previous_headings":"","what":"Summarizing possible outcome histories","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"library(magrittr) trial_init(prob = .3) %>%   trial_advance() %>%   trial_advance() %>%   .$out %>%   sum_across() %>%   prod_across() #> # A tibble: 8 × 8 #>   global_probs global_outcome t1_outcome t1_prob t2_ou…¹ t2_prob t3_ou…² t3_prob #>          <dbl>          <dbl>      <int>   <dbl>   <int>   <dbl>   <int>   <dbl> #> 1        0.343              0          0     0.7       0     0.7       0     0.7 #> 2        0.147              1          0     0.7       0     0.7       1     0.3 #> 3        0.147              1          0     0.7       1     0.3       0     0.7 #> 4        0.063              2          0     0.7       1     0.3       1     0.3 #> 5        0.147              1          1     0.3       0     0.7       0     0.7 #> 6        0.063              2          1     0.3       0     0.7       1     0.3 #> 7        0.063              2          1     0.3       1     0.3       0     0.7 #> 8        0.027              3          1     0.3       1     0.3       1     0.3 #> # … with abbreviated variable names ¹​t2_outcome, ²​t3_outcome library(magrittr) bernoulli_trial(prob = .5) %>%   add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() #> # A tibble: 128 × 16 #>    global_probs global…¹ t1_ou…² t1_prob t2_ou…³ t2_prob t3_ou…⁴ t3_prob t4_ou…⁵ #>           <dbl>    <dbl>   <int>   <dbl>   <int>   <dbl>   <int>   <dbl>   <int> #>  1      0.00781        0       0     0.5       0     0.5       0     0.5       0 #>  2      0.00781        1       0     0.5       0     0.5       0     0.5       0 #>  3      0.00781        1       0     0.5       0     0.5       0     0.5       0 #>  4      0.00781        2       0     0.5       0     0.5       0     0.5       0 #>  5      0.00781        1       0     0.5       0     0.5       0     0.5       0 #>  6      0.00781        2       0     0.5       0     0.5       0     0.5       0 #>  7      0.00781        2       0     0.5       0     0.5       0     0.5       0 #>  8      0.00781        3       0     0.5       0     0.5       0     0.5       0 #>  9      0.00781        1       0     0.5       0     0.5       0     0.5       1 #> 10      0.00781        2       0     0.5       0     0.5       0     0.5       1 #> # … with 118 more rows, 7 more variables: t4_prob <dbl>, t5_outcome <int>, #> #   t5_prob <dbl>, t6_outcome <int>, t6_prob <dbl>, t7_outcome <int>, #> #   t7_prob <dbl>, and abbreviated variable names ¹​global_outcome, ²​t1_outcome, #> #   ³​t2_outcome, ⁴​t3_outcome, ⁵​t4_outcome"},{"path":"/index.html","id":"further-summary-based-on-outcome-of-interest","dir":"","previous_headings":"","what":"Further summary based on outcome of interest…","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union bernoulli_trial(prob = .5) %>%   add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() %>%   group_by(global_outcome) %>%   summarize(probs = sum(global_probs)) #> # A tibble: 8 × 2 #>   global_outcome   probs #>            <dbl>   <dbl> #> 1              0 0.00781 #> 2              1 0.0547  #> 3              2 0.164   #> 4              3 0.273   #> 5              4 0.273   #> 6              5 0.164   #> 7              6 0.0547  #> 8              7 0.00781"},{"path":"/index.html","id":"cross-validate-work","dir":"","previous_headings":"","what":"Cross-validate work","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"dbinom(x =  0:7, size = 7, prob = .5) #> [1] 0.0078125 0.0546875 0.1640625 0.2734375 0.2734375 0.1640625 0.0546875 #> [8] 0.0078125"},{"path":"/index.html","id":"peek-into-internals-of-tidybernoulli","dir":"","previous_headings":"","what":"Peek into internals of tidybernoulli","title":"Observe consecutive bernoulli trials in dataframe ","text":"","code":"readLines(\"R/bernoulli-trial.R\")[150:180] #>  [1] \"#\"                                                                                   #>  [2] \"# my_trials\"                                                                         #>  [3] \"#\"                                                                                   #>  [4] \"# my_trials$init(trial = bernoulli_trial())\"                                         #>  [5] \"# my_trials$out\"                                                                     #>  [6] \"# my_trials$update()\"                                                                #>  [7] \"# my_trials$out\"                                                                     #>  [8] \"\"                                                                                    #>  [9] \"Trials <- R6::R6Class(\\\"Trials\\\",\"                                                   #> [10] \"                  public = list(\"                                                    #> [11] \"\"                                                                                    #> [12] \"                    # objects\"                                                       #> [13] \"                    trial = NULL,\"                                                   #> [14] \"                    index = NULL,\"                                                   #> [15] \"                    out = NULL,\"                                                     #> [16] \"\"                                                                                    #> [17] \"\"                                                                                    #> [18] \"                    # functions\"                                                     #> [19] \"                    init = function(trial = NULL){\"                                  #> [20] \"\"                                                                                    #> [21] \"                      self$trial <- trial\"                                           #> [22] \"                      self$index <- 1\"                                               #> [23] \"\"                                                                                    #> [24] \"                      self$out <- cross_trials(self$trial, num_trials = self$index)\" #> [25] \"\"                                                                                    #> [26] \"                      invisible(self)          #returns\"                             #> [27] \"\"                                                                                    #> [28] \"\"                                                                                    #> [29] \"                    },\"                                                              #> [30] \"\"                                                                                    #> [31] \"                    update = function(increment = 1){ # a method\""},{"path":"/reference/add_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — add_trials","title":"Title — add_trials","text":"Title","code":""},{"path":"/reference/add_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — add_trials","text":"","code":"add_trials(trials, increment = 1)"},{"path":"/reference/add_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — add_trials","text":"increment","code":""},{"path":"/reference/add_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — add_trials","text":"","code":"bernoulli_trial() |> trial_init() |>   add_trials() |>   add_trials() #> # A tibble: 8 × 6 #>   t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>        <int>   <dbl>      <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75          0    0.75 #> 2          0    0.75          0    0.75          1    0.25 #> 3          0    0.75          1    0.25          0    0.75 #> 4          0    0.75          1    0.25          1    0.25 #> 5          1    0.25          0    0.75          0    0.75 #> 6          1    0.25          0    0.75          1    0.25 #> 7          1    0.25          1    0.25          0    0.75 #> 8          1    0.25          1    0.25          1    0.25"},{"path":"/reference/bernoulli_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — bernoulli_trial","title":"Title — bernoulli_trial","text":"Title","code":""},{"path":"/reference/bernoulli_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — bernoulli_trial","text":"","code":"bernoulli_trial(outcome_type = \"num\", outcome_set = c(0, 1), prob = 0.25)"},{"path":"/reference/bernoulli_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — bernoulli_trial","text":"prob probability success, default .25","code":""},{"path":"/reference/bernoulli_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — bernoulli_trial","text":"probability outcome 0 1","code":""},{"path":"/reference/bernoulli_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — bernoulli_trial","text":"","code":"bernoulli_trial(.5) #> function (..., list = character(), package = NULL, lib.loc = NULL,  #>     verbose = getOption(\"verbose\"), envir = .GlobalEnv, overwrite = TRUE)  #> { #>     fileExt <- function(x) { #>         db <- grepl(\"\\\\.[^.]+\\\\.(gz|bz2|xz)$\", x) #>         ans <- sub(\".*\\\\.\", \"\", x) #>         ans[db] <- sub(\".*\\\\.([^.]+\\\\.)(gz|bz2|xz)$\", \"\\\\1\\\\2\",  #>             x[db]) #>         ans #>     } #>     my_read_table <- function(...) { #>         lcc <- Sys.getlocale(\"LC_COLLATE\") #>         on.exit(Sys.setlocale(\"LC_COLLATE\", lcc)) #>         Sys.setlocale(\"LC_COLLATE\", \"C\") #>         read.table(...) #>     } #>     stopifnot(is.character(list)) #>     names <- c(as.character(substitute(list(...))[-1L]), list) #>     if (!is.null(package)) { #>         if (!is.character(package))  #>             stop(\"'package' must be a character vector or NULL\") #>     } #>     paths <- find.package(package, lib.loc, verbose = verbose) #>     if (is.null(lib.loc))  #>         paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),  #>             paths) #>     paths <- unique(normalizePath(paths[file.exists(paths)])) #>     paths <- paths[dir.exists(file.path(paths, \"data\"))] #>     dataExts <- tools:::.make_file_exts(\"data\") #>     if (length(names) == 0L) { #>         db <- matrix(character(), nrow = 0L, ncol = 4L) #>         for (path in paths) { #>             entries <- NULL #>             packageName <- if (file_test(\"-f\", file.path(path,  #>                 \"DESCRIPTION\")))  #>                 basename(path) #>             else \".\" #>             if (file_test(\"-f\", INDEX <- file.path(path, \"Meta\",  #>                 \"data.rds\"))) { #>                 entries <- readRDS(INDEX) #>             } #>             else { #>                 dataDir <- file.path(path, \"data\") #>                 entries <- tools::list_files_with_type(dataDir,  #>                   \"data\") #>                 if (length(entries)) { #>                   entries <- unique(tools::file_path_sans_ext(basename(entries))) #>                   entries <- cbind(entries, \"\") #>                 } #>             } #>             if (NROW(entries)) { #>                 if (is.matrix(entries) && ncol(entries) == 2L)  #>                   db <- rbind(db, cbind(packageName, dirname(path),  #>                     entries)) #>                 else warning(gettextf(\"data index for package %s is invalid and will be ignored\",  #>                   sQuote(packageName)), domain = NA, call. = FALSE) #>             } #>         } #>         colnames(db) <- c(\"Package\", \"LibPath\", \"Item\", \"Title\") #>         footer <- if (missing(package))  #>             paste0(\"Use \", sQuote(paste(\"data(package =\", \".packages(all.available = TRUE))\")),  #>                 \"\\n\", \"to list the data sets in all *available* packages.\") #>         else NULL #>         y <- list(title = \"Data sets\", header = NULL, results = db,  #>             footer = footer) #>         class(y) <- \"packageIQR\" #>         return(y) #>     } #>     paths <- file.path(paths, \"data\") #>     for (name in names) { #>         found <- FALSE #>         for (p in paths) { #>             tmp_env <- if (overwrite)  #>                 envir #>             else new.env() #>             if (file_test(\"-f\", file.path(p, \"Rdata.rds\"))) { #>                 rds <- readRDS(file.path(p, \"Rdata.rds\")) #>                 if (name %in% names(rds)) { #>                   found <- TRUE #>                   if (verbose)  #>                     message(sprintf(\"name=%s:\\t found in Rdata.rds\",  #>                       name), domain = NA) #>                   thispkg <- sub(\".*/([^/]*)/data$\", \"\\\\1\", p) #>                   thispkg <- sub(\"_.*$\", \"\", thispkg) #>                   thispkg <- paste0(\"package:\", thispkg) #>                   objs <- rds[[name]] #>                   lazyLoad(file.path(p, \"Rdata\"), envir = tmp_env,  #>                     filter = function(x) x %in% objs) #>                   break #>                 } #>                 else if (verbose)  #>                   message(sprintf(\"name=%s:\\t NOT found in names() of Rdata.rds, i.e.,\\n\\t%s\\n\",  #>                     name, paste(names(rds), collapse = \",\")),  #>                     domain = NA) #>             } #>             if (file_test(\"-f\", file.path(p, \"Rdata.zip\"))) { #>                 warning(\"zipped data found for package \", sQuote(basename(dirname(p))),  #>                   \".\\nThat is defunct, so please re-install the package.\",  #>                   domain = NA) #>                 if (file_test(\"-f\", fp <- file.path(p, \"filelist\")))  #>                   files <- file.path(p, scan(fp, what = \"\", quiet = TRUE)) #>                 else { #>                   warning(gettextf(\"file 'filelist' is missing for directory %s\",  #>                     sQuote(p)), domain = NA) #>                   next #>                 } #>             } #>             else { #>                 files <- list.files(p, full.names = TRUE) #>             } #>             files <- files[grep(name, files, fixed = TRUE)] #>             if (length(files) > 1L) { #>                 o <- match(fileExt(files), dataExts, nomatch = 100L) #>                 paths0 <- dirname(files) #>                 paths0 <- factor(paths0, levels = unique(paths0)) #>                 files <- files[order(paths0, o)] #>             } #>             if (length(files)) { #>                 for (file in files) { #>                   if (verbose)  #>                     message(\"name=\", name, \":\\t file= ...\", .Platform$file.sep,  #>                       basename(file), \"::\\t\", appendLF = FALSE,  #>                       domain = NA) #>                   ext <- fileExt(file) #>                   if (basename(file) != paste0(name, \".\", ext))  #>                     found <- FALSE #>                   else { #>                     found <- TRUE #>                     zfile <- file #>                     zipname <- file.path(dirname(file), \"Rdata.zip\") #>                     if (file.exists(zipname)) { #>                       Rdatadir <- tempfile(\"Rdata\") #>                       dir.create(Rdatadir, showWarnings = FALSE) #>                       topic <- basename(file) #>                       rc <- .External(C_unzip, zipname, topic,  #>                         Rdatadir, FALSE, TRUE, FALSE, FALSE) #>                       if (rc == 0L)  #>                         zfile <- file.path(Rdatadir, topic) #>                     } #>                     if (zfile != file)  #>                       on.exit(unlink(zfile)) #>                     switch(ext, R = , r = { #>                       library(\"utils\") #>                       sys.source(zfile, chdir = TRUE, envir = tmp_env) #>                     }, RData = , rdata = , rda = load(zfile,  #>                       envir = tmp_env), TXT = , txt = , tab = ,  #>                       tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,  #>                       txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,  #>                         header = TRUE, as.is = FALSE), envir = tmp_env),  #>                       CSV = , csv = , csv.gz = , csv.bz2 = ,  #>                       csv.xz = assign(name, my_read_table(zfile,  #>                         header = TRUE, sep = \";\", as.is = FALSE),  #>                         envir = tmp_env), found <- FALSE) #>                   } #>                   if (found)  #>                     break #>                 } #>                 if (verbose)  #>                   message(if (!found)  #>                     \"*NOT* \", \"found\", domain = NA) #>             } #>             if (found)  #>                 break #>         } #>         if (!found) { #>             warning(gettextf(\"data set %s not found\", sQuote(name)),  #>                 domain = NA) #>         } #>         else if (!overwrite) { #>             for (o in ls(envir = tmp_env, all.names = TRUE)) { #>                 if (exists(o, envir = envir, inherits = FALSE))  #>                   warning(gettextf(\"an object named %s already exists and will not be overwritten\",  #>                     sQuote(o))) #>                 else assign(o, get(o, envir = tmp_env, inherits = FALSE),  #>                   envir = envir) #>             } #>             rm(tmp_env) #>         } #>     } #>     invisible(names) #> } #> <bytecode: 0x7f81f5f7f568> #> <environment: namespace:utils> bernoulli_trial(.6) #> function (..., list = character(), package = NULL, lib.loc = NULL,  #>     verbose = getOption(\"verbose\"), envir = .GlobalEnv, overwrite = TRUE)  #> { #>     fileExt <- function(x) { #>         db <- grepl(\"\\\\.[^.]+\\\\.(gz|bz2|xz)$\", x) #>         ans <- sub(\".*\\\\.\", \"\", x) #>         ans[db] <- sub(\".*\\\\.([^.]+\\\\.)(gz|bz2|xz)$\", \"\\\\1\\\\2\",  #>             x[db]) #>         ans #>     } #>     my_read_table <- function(...) { #>         lcc <- Sys.getlocale(\"LC_COLLATE\") #>         on.exit(Sys.setlocale(\"LC_COLLATE\", lcc)) #>         Sys.setlocale(\"LC_COLLATE\", \"C\") #>         read.table(...) #>     } #>     stopifnot(is.character(list)) #>     names <- c(as.character(substitute(list(...))[-1L]), list) #>     if (!is.null(package)) { #>         if (!is.character(package))  #>             stop(\"'package' must be a character vector or NULL\") #>     } #>     paths <- find.package(package, lib.loc, verbose = verbose) #>     if (is.null(lib.loc))  #>         paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),  #>             paths) #>     paths <- unique(normalizePath(paths[file.exists(paths)])) #>     paths <- paths[dir.exists(file.path(paths, \"data\"))] #>     dataExts <- tools:::.make_file_exts(\"data\") #>     if (length(names) == 0L) { #>         db <- matrix(character(), nrow = 0L, ncol = 4L) #>         for (path in paths) { #>             entries <- NULL #>             packageName <- if (file_test(\"-f\", file.path(path,  #>                 \"DESCRIPTION\")))  #>                 basename(path) #>             else \".\" #>             if (file_test(\"-f\", INDEX <- file.path(path, \"Meta\",  #>                 \"data.rds\"))) { #>                 entries <- readRDS(INDEX) #>             } #>             else { #>                 dataDir <- file.path(path, \"data\") #>                 entries <- tools::list_files_with_type(dataDir,  #>                   \"data\") #>                 if (length(entries)) { #>                   entries <- unique(tools::file_path_sans_ext(basename(entries))) #>                   entries <- cbind(entries, \"\") #>                 } #>             } #>             if (NROW(entries)) { #>                 if (is.matrix(entries) && ncol(entries) == 2L)  #>                   db <- rbind(db, cbind(packageName, dirname(path),  #>                     entries)) #>                 else warning(gettextf(\"data index for package %s is invalid and will be ignored\",  #>                   sQuote(packageName)), domain = NA, call. = FALSE) #>             } #>         } #>         colnames(db) <- c(\"Package\", \"LibPath\", \"Item\", \"Title\") #>         footer <- if (missing(package))  #>             paste0(\"Use \", sQuote(paste(\"data(package =\", \".packages(all.available = TRUE))\")),  #>                 \"\\n\", \"to list the data sets in all *available* packages.\") #>         else NULL #>         y <- list(title = \"Data sets\", header = NULL, results = db,  #>             footer = footer) #>         class(y) <- \"packageIQR\" #>         return(y) #>     } #>     paths <- file.path(paths, \"data\") #>     for (name in names) { #>         found <- FALSE #>         for (p in paths) { #>             tmp_env <- if (overwrite)  #>                 envir #>             else new.env() #>             if (file_test(\"-f\", file.path(p, \"Rdata.rds\"))) { #>                 rds <- readRDS(file.path(p, \"Rdata.rds\")) #>                 if (name %in% names(rds)) { #>                   found <- TRUE #>                   if (verbose)  #>                     message(sprintf(\"name=%s:\\t found in Rdata.rds\",  #>                       name), domain = NA) #>                   thispkg <- sub(\".*/([^/]*)/data$\", \"\\\\1\", p) #>                   thispkg <- sub(\"_.*$\", \"\", thispkg) #>                   thispkg <- paste0(\"package:\", thispkg) #>                   objs <- rds[[name]] #>                   lazyLoad(file.path(p, \"Rdata\"), envir = tmp_env,  #>                     filter = function(x) x %in% objs) #>                   break #>                 } #>                 else if (verbose)  #>                   message(sprintf(\"name=%s:\\t NOT found in names() of Rdata.rds, i.e.,\\n\\t%s\\n\",  #>                     name, paste(names(rds), collapse = \",\")),  #>                     domain = NA) #>             } #>             if (file_test(\"-f\", file.path(p, \"Rdata.zip\"))) { #>                 warning(\"zipped data found for package \", sQuote(basename(dirname(p))),  #>                   \".\\nThat is defunct, so please re-install the package.\",  #>                   domain = NA) #>                 if (file_test(\"-f\", fp <- file.path(p, \"filelist\")))  #>                   files <- file.path(p, scan(fp, what = \"\", quiet = TRUE)) #>                 else { #>                   warning(gettextf(\"file 'filelist' is missing for directory %s\",  #>                     sQuote(p)), domain = NA) #>                   next #>                 } #>             } #>             else { #>                 files <- list.files(p, full.names = TRUE) #>             } #>             files <- files[grep(name, files, fixed = TRUE)] #>             if (length(files) > 1L) { #>                 o <- match(fileExt(files), dataExts, nomatch = 100L) #>                 paths0 <- dirname(files) #>                 paths0 <- factor(paths0, levels = unique(paths0)) #>                 files <- files[order(paths0, o)] #>             } #>             if (length(files)) { #>                 for (file in files) { #>                   if (verbose)  #>                     message(\"name=\", name, \":\\t file= ...\", .Platform$file.sep,  #>                       basename(file), \"::\\t\", appendLF = FALSE,  #>                       domain = NA) #>                   ext <- fileExt(file) #>                   if (basename(file) != paste0(name, \".\", ext))  #>                     found <- FALSE #>                   else { #>                     found <- TRUE #>                     zfile <- file #>                     zipname <- file.path(dirname(file), \"Rdata.zip\") #>                     if (file.exists(zipname)) { #>                       Rdatadir <- tempfile(\"Rdata\") #>                       dir.create(Rdatadir, showWarnings = FALSE) #>                       topic <- basename(file) #>                       rc <- .External(C_unzip, zipname, topic,  #>                         Rdatadir, FALSE, TRUE, FALSE, FALSE) #>                       if (rc == 0L)  #>                         zfile <- file.path(Rdatadir, topic) #>                     } #>                     if (zfile != file)  #>                       on.exit(unlink(zfile)) #>                     switch(ext, R = , r = { #>                       library(\"utils\") #>                       sys.source(zfile, chdir = TRUE, envir = tmp_env) #>                     }, RData = , rdata = , rda = load(zfile,  #>                       envir = tmp_env), TXT = , txt = , tab = ,  #>                       tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,  #>                       txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,  #>                         header = TRUE, as.is = FALSE), envir = tmp_env),  #>                       CSV = , csv = , csv.gz = , csv.bz2 = ,  #>                       csv.xz = assign(name, my_read_table(zfile,  #>                         header = TRUE, sep = \";\", as.is = FALSE),  #>                         envir = tmp_env), found <- FALSE) #>                   } #>                   if (found)  #>                     break #>                 } #>                 if (verbose)  #>                   message(if (!found)  #>                     \"*NOT* \", \"found\", domain = NA) #>             } #>             if (found)  #>                 break #>         } #>         if (!found) { #>             warning(gettextf(\"data set %s not found\", sQuote(name)),  #>                 domain = NA) #>         } #>         else if (!overwrite) { #>             for (o in ls(envir = tmp_env, all.names = TRUE)) { #>                 if (exists(o, envir = envir, inherits = FALSE))  #>                   warning(gettextf(\"an object named %s already exists and will not be overwritten\",  #>                     sQuote(o))) #>                 else assign(o, get(o, envir = tmp_env, inherits = FALSE),  #>                   envir = envir) #>             } #>             rm(tmp_env) #>         } #>     } #>     invisible(names) #> } #> <bytecode: 0x7f81f5f7f568> #> <environment: namespace:utils>"},{"path":"/reference/cross_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — cross_trials","title":"Title — cross_trials","text":"Title","code":""},{"path":"/reference/cross_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — cross_trials","text":"","code":"cross_trials(trial, num_trials = 2)"},{"path":"/reference/cross_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — cross_trials","text":"num_trials","code":""},{"path":"/reference/cross_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — cross_trials","text":"","code":"bernoulli_trial() |>   cross_trials(num_trials = 3) #> # A tibble: 8 × 6 #>   t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>        <int>   <dbl>      <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75          0    0.75 #> 2          0    0.75          0    0.75          1    0.25 #> 3          0    0.75          1    0.25          0    0.75 #> 4          0    0.75          1    0.25          1    0.25 #> 5          1    0.25          0    0.75          0    0.75 #> 6          1    0.25          0    0.75          1    0.25 #> 7          1    0.25          1    0.25          0    0.75 #> 8          1    0.25          1    0.25          1    0.25"},{"path":"/reference/fair_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — fair_coin","title":"Title — fair_coin","text":"Title","code":""},{"path":"/reference/fair_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — fair_coin","text":"","code":"fair_coin(outcome_type = \"char\", outcome_set = c(\"tails\", \"heads\"))"},{"path":"/reference/fair_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — fair_coin","text":"prob probability success, default .25","code":""},{"path":"/reference/fair_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — fair_coin","text":"probability outcome 0 1","code":""},{"path":"/reference/fair_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — fair_coin","text":"","code":"fair_coin() #>   outcome prob #> 1   tails  0.5 #> 2   heads  0.5 fair_coin(outcome_type = \"num\") #>   outcome prob #> 1       0  0.5 #> 2       1  0.5 fair_coin(outcome_type = \"logical\") #>   outcome prob #> 1   FALSE  0.5 #> 2    TRUE  0.5 fair_coin(outcome_set = c(\"fish\", \"no fish\")) #>   outcome prob #> 1    fish  0.5 #> 2 no fish  0.5"},{"path":"/reference/prize_wheel.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — prize_wheel","title":"Title — prize_wheel","text":"Title","code":""},{"path":"/reference/prize_wheel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — prize_wheel","text":"","code":"prize_wheel(back_story = TRUE)"},{"path":"/reference/prize_wheel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — prize_wheel","text":"back_story","code":""},{"path":"/reference/prize_wheel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — prize_wheel","text":"","code":"prize_wheel() #>   outcome           prob #> 1      $0 9 of 12 slices #> 2      $1 2 of 12 slices #> 3      $3  1 of 12 slice prize_wheel(back_story = FALSE) #>   outcome       prob #> 1       0 0.75000000 #> 2       1 0.16666667 #> 3       3 0.08333333  prize_wheel() |>  trial_init() |>  trial_advance() #> # A tibble: 9 × 4 #>   t1_outcome t1_prob        t2_outcome t2_prob        #>   <chr>      <chr>          <chr>      <chr>          #> 1 $0         9 of 12 slices $0         9 of 12 slices #> 2 $0         9 of 12 slices $1         2 of 12 slices #> 3 $0         9 of 12 slices $3         1 of 12 slice  #> 4 $1         2 of 12 slices $0         9 of 12 slices #> 5 $1         2 of 12 slices $1         2 of 12 slices #> 6 $1         2 of 12 slices $3         1 of 12 slice  #> 7 $3         1 of 12 slice  $0         9 of 12 slices #> 8 $3         1 of 12 slice  $1         2 of 12 slices #> 9 $3         1 of 12 slice  $3         1 of 12 slice   prize_wheel(back_story = FALSE) |>  trial_init() |>  trial_advance() #> # A tibble: 9 × 4 #>   t1_outcome t1_prob t2_outcome t2_prob #>        <dbl>   <dbl>      <dbl>   <dbl> #> 1          0  0.75            0  0.75   #> 2          0  0.75            1  0.167  #> 3          0  0.75            3  0.0833 #> 4          1  0.167           0  0.75   #> 5          1  0.167           1  0.167  #> 6          1  0.167           3  0.0833 #> 7          3  0.0833          0  0.75   #> 8          3  0.0833          1  0.167  #> 9          3  0.0833          3  0.0833"},{"path":"/reference/prod_across.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — prod_across","title":"Title — prod_across","text":"Title","code":""},{"path":"/reference/prod_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — prod_across","text":"","code":"prod_across(data, var_key = \"prob\")"},{"path":"/reference/prod_across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — prod_across","text":"var_key","code":""},{"path":"/reference/prod_across.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — prod_across","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(magrittr) bernoulli_trial(prob = .5) %>%   add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() %>%   group_by(global_outcome) %>%   summarize(probs = sum(global_probs)) #> # A tibble: 8 × 2 #>   global_outcome   probs #>            <dbl>   <dbl> #> 1              0 0.00781 #> 2              1 0.0547  #> 3              2 0.164   #> 4              3 0.273   #> 5              4 0.273   #> 6              5 0.164   #> 7              6 0.0547  #> 8              7 0.00781   bernoulli_trial(prob = .5) %>%   add_trials() %>%   add_trials() %>%   add_trials(5) %>%   .$out %>%   sum_across() %>%   prod_across() #> # A tibble: 128 × 16 #>    global_probs global…¹ t1_ou…² t1_prob t2_ou…³ t2_prob t3_ou…⁴ t3_prob t4_ou…⁵ #>           <dbl>    <dbl>   <int>   <dbl>   <int>   <dbl>   <int>   <dbl>   <int> #>  1      0.00781        0       0     0.5       0     0.5       0     0.5       0 #>  2      0.00781        1       0     0.5       0     0.5       0     0.5       0 #>  3      0.00781        1       0     0.5       0     0.5       0     0.5       0 #>  4      0.00781        2       0     0.5       0     0.5       0     0.5       0 #>  5      0.00781        1       0     0.5       0     0.5       0     0.5       0 #>  6      0.00781        2       0     0.5       0     0.5       0     0.5       0 #>  7      0.00781        2       0     0.5       0     0.5       0     0.5       0 #>  8      0.00781        3       0     0.5       0     0.5       0     0.5       0 #>  9      0.00781        1       0     0.5       0     0.5       0     0.5       1 #> 10      0.00781        2       0     0.5       0     0.5       0     0.5       1 #> # … with 118 more rows, 7 more variables: t4_prob <dbl>, t5_outcome <int>, #> #   t5_prob <dbl>, t6_outcome <int>, t6_prob <dbl>, t7_outcome <int>, #> #   t7_prob <dbl>, and abbreviated variable names ¹​global_outcome, ²​t1_outcome, #> #   ³​t2_outcome, ⁴​t3_outcome, ⁵​t4_outcome"},{"path":"/reference/seq_across.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — seq_across","title":"Title — seq_across","text":"Title","code":""},{"path":"/reference/seq_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — seq_across","text":"","code":"seq_across(data, var_key = \"outcome\")"},{"path":"/reference/seq_across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — seq_across","text":"var_key","code":""},{"path":"/reference/seq_across.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — seq_across","text":"","code":"library(magrittr) library(dplyr) bernoulli_trial(prob = .5) %>% add_trials(3) %>%   .$out %>%   seq_across() %>%   prod_across() %>%   group_by(global_outcome) %>%   summarize(probs = sum(global_probs)) #> # A tibble: 8 × 2 #>   global_outcome probs #>   <chr>          <dbl> #> 1 0, 0, 0        0.125 #> 2 0, 0, 1        0.125 #> 3 0, 1, 0        0.125 #> 4 0, 1, 1        0.125 #> 5 1, 0, 0        0.125 #> 6 1, 0, 1        0.125 #> 7 1, 1, 0        0.125 #> 8 1, 1, 1        0.125  library(magrittr) library(dplyr) bernoulli_trial(prob = .25) %>% add_trials(3) %>%   .$out %>%   seq_across() %>%   prod_across() #> # A tibble: 8 × 8 #>   global_probs global_outcome t1_outcome t1_prob t2_ou…¹ t2_prob t3_ou…² t3_prob #>          <dbl> <chr>               <int>   <dbl>   <int>   <dbl>   <int>   <dbl> #> 1       0.422  0, 0, 0                 0    0.75       0    0.75       0    0.75 #> 2       0.141  0, 0, 1                 0    0.75       0    0.75       1    0.25 #> 3       0.141  0, 1, 0                 0    0.75       1    0.25       0    0.75 #> 4       0.0469 0, 1, 1                 0    0.75       1    0.25       1    0.25 #> 5       0.141  1, 0, 0                 1    0.25       0    0.75       0    0.75 #> 6       0.0469 1, 0, 1                 1    0.25       0    0.75       1    0.25 #> 7       0.0469 1, 1, 0                 1    0.25       1    0.25       0    0.75 #> 8       0.0156 1, 1, 1                 1    0.25       1    0.25       1    0.25 #> # … with abbreviated variable names ¹​t2_outcome, ²​t3_outcome"},{"path":"/reference/sum_across.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — sum_across","title":"Title — sum_across","text":"Title","code":""},{"path":"/reference/sum_across.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — sum_across","text":"","code":"sum_across(data, var_key = \"outcome\")"},{"path":"/reference/sum_across.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — sum_across","text":"var_key","code":""},{"path":"/reference/trial_advance.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — trial_advance","title":"Title — trial_advance","text":"Title","code":""},{"path":"/reference/trial_advance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — trial_advance","text":"","code":"trial_advance(trials, increment = 1)"},{"path":"/reference/trial_advance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — trial_advance","text":"increment","code":""},{"path":"/reference/trial_advance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — trial_advance","text":"","code":"bernoulli_trial() |> trial_init() |>   trial_advance() #> # A tibble: 4 × 4 #>   t1_outcome t1_prob t2_outcome t2_prob #>        <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75 #> 2          0    0.75          1    0.25 #> 3          1    0.25          0    0.75 #> 4          1    0.25          1    0.25  bernoulli_trial() |> trial_init() |>   trial_advance(2) #> # A tibble: 8 × 6 #>   t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>        <int>   <dbl>      <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75          0    0.75 #> 2          0    0.75          0    0.75          1    0.25 #> 3          0    0.75          1    0.25          0    0.75 #> 4          0    0.75          1    0.25          1    0.25 #> 5          1    0.25          0    0.75          0    0.75 #> 6          1    0.25          0    0.75          1    0.25 #> 7          1    0.25          1    0.25          0    0.75 #> 8          1    0.25          1    0.25          1    0.25  bernoulli_trial() |> trial_init() |>   trial_advance() |>   trial_advance() #> # A tibble: 8 × 6 #>   t1_outcome t1_prob t2_outcome t2_prob t3_outcome t3_prob #>        <int>   <dbl>      <int>   <dbl>      <int>   <dbl> #> 1          0    0.75          0    0.75          0    0.75 #> 2          0    0.75          0    0.75          1    0.25 #> 3          0    0.75          1    0.25          0    0.75 #> 4          0    0.75          1    0.25          1    0.25 #> 5          1    0.25          0    0.75          0    0.75 #> 6          1    0.25          0    0.75          1    0.25 #> 7          1    0.25          1    0.25          0    0.75 #> 8          1    0.25          1    0.25          1    0.25"},{"path":"/reference/trial_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — trial_init","title":"Title — trial_init","text":"Title","code":""},{"path":"/reference/trial_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — trial_init","text":"","code":"trial_init(trial = NULL, prob = 0.25)"},{"path":"/reference/trial_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — trial_init","text":"trial","code":""},{"path":"/reference/trial_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — trial_init","text":"","code":"bernoulli_trial() |> trial_init() #>   t1_outcome t1_prob #> 1          0    0.75 #> 2          1    0.25  trial_init() #>   t1_outcome t1_prob #> 1          0    0.75 #> 2          1    0.25"},{"path":"/reference/weighted_coin.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — weighted_coin","title":"Title — weighted_coin","text":"Title","code":""},{"path":"/reference/weighted_coin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — weighted_coin","text":"","code":"weighted_coin(   prob = 0.75,   outcome_type = \"char\",   outcome_set = c(\"tails\", \"heads\") )"},{"path":"/reference/weighted_coin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — weighted_coin","text":"prob probability success, default .25","code":""},{"path":"/reference/weighted_coin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — weighted_coin","text":"probability outcome 0 1","code":""},{"path":"/reference/weighted_coin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — weighted_coin","text":"","code":"weighted_coin() #>   outcome prob #> 1   tails 0.25 #> 2   heads 0.75 weighted_coin(prob = .55) #>   outcome prob #> 1   tails 0.45 #> 2   heads 0.55 weighted_coin(outcome_type = \"num\") #>   outcome prob #> 1       0 0.25 #> 2       1 0.75 weighted_coin(outcome_type = \"logical\") #>   outcome prob #> 1   FALSE 0.25 #> 2    TRUE 0.75 weighted_coin(outcome_set = c(\"fish\", \"no fish\")) #>   outcome prob #> 1    fish 0.25 #> 2 no fish 0.75"}]
